<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.bjcric</groupId>
  <artifactId>mavenweb</artifactId>
  <packaging>war</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>mavenweb Maven Webapp</name>
  <url>http://maven.apache.org</url>
   <parent>
  <!--  Spring Boot的核心启动器，包含了自动配置、日志和YAML -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.6.RELEASE</version>
    </parent>
  
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  <!--   当我们在pom文件中增加spring-boot-starter-web的maven依赖时，
    不做任何web相关的配置便能提供web服务，
    支持全栈式Web开发，包括Tomcat和spring-webmvc。，
    这还得归于spring boot 自动配置的功能
    （因为加了EnableAutoConfiguration的注解），
    帮我们创建了一堆默认的配置，以前在web.xml中配置，
    现在都可以通过spring bean的方式进行配置，由spring来进行生命周期的管理，
    大多数情况下，我们需要重载这些配置
    （例如修改服务的启动端口，
    contextpath,filter,listener,servlet,session超时时间等） -->
       <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
       <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
       <!-- 1. hymeleaf是的集成的模板引擎 模板文件位置
2.默认情况下我们需要把编写的模板文件放在src/main/resources/templates目录下
3.如果想要更换templates目录可以修改spring.thymeleaf.prefix配置项-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
          <!--       默认情况下，/META-INF/maven，/META-INF/resources，
        /resources，/static，/templates，/public这些文件夹下的文件修改
        不会使应用重启，但是会重新加载（devtools内嵌了一个
        LiveReload server，当资源发生改变时，浏览器刷新）。
		如果想改变默认的设置，可以自己设置不重启的目录：
			spring.devtools.restart.exclude=static/**,public/**，
			这样的话，就只有这两个目录下的文件修改不会导致restart操作了。
		如果要在保留默认设置的基础上还要添加其他的排除目录：
		spring.devtools.restart.additional-exclude
		如果想要使得当非classpath下的文件发生变化时应用得以重启，
		使用：spring.devtools.restart.additional-paths，
		这样devtools就会将该目录列入了监听范围 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <properties>
        <java.version>1.8</java.version>
    </properties>
  
  <build>
       <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
  
    <finalName>mavenweb</finalName>
  </build>
  
</project>
