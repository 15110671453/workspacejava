SpringAOPAPI实现 spring1.2 中使用这些API
spring2.0开始支持 基于XML配置文件 实现 和基于annotation实现
AOP实现的机制就是代理
代理类
ProxyFactoryBean
在spring里创建一个AOP代理的基本方法是使用
org.springframework.aop.framework.ProxyFactoryBean;
这个类对应用的切入点和通知提供了完整的控制能力
重要属性
proxyInterfaces 被代理的接口
target 被代理的实例
interceptorNames Advice实例 这里是拦截器 拦截器的实现方式Advice

代理类ProxyFactoryBean的配置实例
<beans>
		<bean id = "UserDao" calss = "com.bjcric.test.UserDaoImpl">
		</bean>
		<bean id = "BeforeAdvice" calss = "com.bjcric.test.BeforeAdvice">
		</bean>
		<bean id = "loggingProxy" calss = "org.springframework.aop.framework.ProxyFactoryBean">
		<property name= "proxyInterfaces" value = "comdao" > </property>
		<property name= "target" ref = "userdao" > </property>
		<property name= "interceptorNames" value = "comdao" > 
			<list>
				<value>beforeAdvice</value>
			</list>
		</property>
		</bean>
</beans>
advices
简介 advices 实现了aspect的真正逻辑 具体来说就是java里的一个类或者一个方法
 before advice
 会在目标对象的方法执行之前被调用
 需要实现的接口是MethodBeforeAdvice 定义如下
 public interface MethodBeforeAdvice extends Before Advice
 {
 		void before(Method m,Object[]args,Object target )throws Throwable:
 		
 -m		被执行的方法
 -args 方法的参数列表
 -target 目标对象
 
 
 
 }
 
 before advice 实例
 实例描述 在调用delete方法之前 由before advice来记录日志
 



