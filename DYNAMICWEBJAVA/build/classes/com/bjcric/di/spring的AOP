SpringAOP
Aspect 切面  
将横切多个业务对象的程序独立出来模块化 该模块可以无侵入式的集成到业务对象当中 例如 事务 日志 权限
通知 Advice 
通知是指切面的具体实现 如记录日志 验证权限 ；通知有各种类型 其中包括 before after around throw等通知
连接点 Joinpoint 
通知执行的时机 如方法调用时 抛出异常时
切入点 Pointcut 
切入点是感兴趣的连接点 
通知和一个切入点表达式关联 并在满足这个切入点的连接点上运行
例如 当执行某个特定名称的方法时
切入点表达式如何和连接点匹配是AOP的核心
Spring缺省使用AspectJ切入点语法
目标 Target 
被一个或者多个切面aspect所通知advise的对象
也有人把它叫做被通知对象advised
是一个被代理proxied对象

代理 Proxy 
AOP框架创建的对象 用来实现切面的功能
在Spring中 AOP代理可以是JDK动态代理或者CGLIB代理
JDK动态代理invoke handler 接口 struct2中 只能代理到接口的级别 ；若更好 就CGLIB
Spring2.0最新引入 基于模式schemed－based风格和@AspectJ注解风格的切面声明，对于使用这些风格的用户来说
代理的创建是透明的


织入 Weaving
把切面aspect连接到其它的应用程序类型或者对象上
并创建一个被通知advised对象
spring和其它纯javaAOP框架一样 在运行时完成织入

静态代理 用代理来理解AOP
静态代理
将系统中与业务逻辑无关的任务，由代理类来完成
例如 在一个财务系统中用户的每一个动作都需要记录日志可以使用代理来实现
实例代码
UserDao
public Interface UserDao{
	public void delete();
}
UserDaoImpl
public class UserDaoImpl implements UserDao
{
  public void delete()
  {
    System.out.println("删除成功!");
  }
}

UserProxy
public class UserProxy implements UserDao
{
//这是代理类
//代理类和被代理类实现同样的接口 并且他们之间有一种关联关系
//其实真正完成这件事的是 被代理类
		private UserDao dao;
		Logger logger = Logger.getLogger(this.getClass().getName());
		public UserProxy(UserDao dao)
		{
			this.dao = dao;
		}
		public  void delete()
		{
		String log = "删除方法执行";
		logger.loglevel.INFO
		
		dao.delete();
		}
		
		
}

测试代码
public static void main(String[] args)
{
		UserDao dao = new UserProxy( new UserDaoImpl());
		dao.delete;

}



